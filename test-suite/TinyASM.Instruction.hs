module Main ( main ) where

import TinyASM.Instruction
import System.Exit

main :: IO ()
main = do
  let generatedByteCodeStrings = map toByteCodeString instructions
      testResults = [
                    generatedByteCodeStrings == expectedByteCodeStrings
                  ]

  if any (==False) testResults then exitFailure else return ()

instructions :: [Instruction]
instructions = [
              Mov (Address 5) (Literal 0),
              Jeq (Literal 90) (Address 5) (Literal 100),
              Aprint (Literal 46),
              Mov (Address 8) (Literal 0),
              Random (Address 6),
              Mov (Address 2) (Address 6),
              Mov (Address 3) (Literal 2),
              Mov (Address 1) (Literal 25),
              Jmp (Literal 125),
              Mov (Address 6) (Address 0),
              Random (Address 7),
              Mov (Address 2) (Address 7),
              Mov (Address 3) (Literal 2),
              Mov (Address 1) (Literal 41),
              Jmp (Literal 125),
              Mov (Address 7) (Address 0),
              Mov (Address 2) (Address 6),
              Mov (Address 3) (Address 6),
              Mov (Address 1) (Literal 55),
              Jmp (Literal 105),
              Mov (Address 6) (Address 0),
              Mov (Address 2) (Address 7),
              Mov (Address 3) (Address 7),
              Mov (Address 1) (Literal 69),
              Jmp (Literal 105),
              Mov (Address 7) (Address 0),
              Add (Address 8) (Address 6),
              Add (Address 8) (Address 7),
              Jgt (Literal 85) (Address 8) (Literal 144),
              Add (Address 9) (Literal 1),
              Add (Address 5) (Literal 1),
              Jmp (Literal 3),
              Aprint (Literal 10),
              Dprint (Address 9),
              Aprint (Literal 47),
              Dprint (Literal 100),
              Aprint (Literal 42),
              Dprint (Literal 4),
              Jmp (Literal 104),
              Halt,
              Mov (Address 10) (Literal 0),
              Mov (Address 0) (Literal 0),
              Jeq (Literal 123) (Address 3) (Address 10),
              Add (Address 10) (Literal 1),
              Add (Address 0) (Address 2),
              Jmp (Literal 111),
              Jmp (Address 1),
              Mov (Address 0) (Literal 0),
              Jls (Literal 140) (Address 2) (Address 3),
              Add (Address 0) (Literal 1),
              Sub (Address 2) (Address 3),
              Jmp (Literal 128),
              Jmp (Address 1)
              ]

expectedByteCodeStrings :: [String]
expectedByteCodeStrings = [
              "0x08 0x05 0x00",
              "0x17 0x5a 0x05 0x64",
              "0x21 0x2e",
              "0x08 0x08 0x00",
              "0x09 0x06",
              "0x07 0x02 0x06",
              "0x08 0x03 0x02",
              "0x08 0x01 0x19",
              "0x0f 0x7d",
              "0x07 0x06 0x00",
              "0x09 0x07",
              "0x07 0x02 0x07",
              "0x08 0x03 0x02",
              "0x08 0x01 0x29",
              "0x0f 0x7d",
              "0x07 0x07 0x00",
              "0x07 0x02 0x06",
              "0x07 0x03 0x06",
              "0x08 0x01 0x37",
              "0x0f 0x69",
              "0x07 0x06 0x00",
              "0x07 0x02 0x07",
              "0x07 0x03 0x07",
              "0x08 0x01 0x45",
              "0x0f 0x69",
              "0x07 0x07 0x00",
              "0x0a 0x08 0x06",
              "0x0a 0x08 0x07",
              "0x1f 0x55 0x08 0x90",
              "0x0b 0x09 0x01",
              "0x0b 0x05 0x01",
              "0x0f 0x03",
              "0x21 0x0a",
              "0x22 0x09",
              "0x21 0x2f",
              "0x23 0x64",
              "0x21 0x2a",
              "0x23 0x04",
              "0x0f 0x68",
              "0xff",
              "0x08 0x0a 0x00",
              "0x08 0x00 0x00",
              "0x15 0x7b 0x03 0x0a",
              "0x0b 0x0a 0x01",
              "0x0a 0x00 0x02",
              "0x0f 0x6f",
              "0x0e 0x01",
              "0x08 0x00 0x00",
              "0x19 0x8c 0x02 0x03",
              "0x0b 0x00 0x01",
              "0x0c 0x02 0x03",
              "0x0f 0x80",
              "0x0e 0x01"
              ]
